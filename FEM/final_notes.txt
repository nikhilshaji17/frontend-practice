The process of retrieving a page goes something like:
1. Code is written in an Editor
2. Code is pushed to a server
3. User requests your URL from the server
4. Our index.html is delivered to them
5. The index.html is read line-by-line, and the corresponding CSS and JS files
	are loaded.

NOTE: The CSS is executed line by line fairly quickly. The JS script is loaded, each line in it is executed line-by-line, and 
		once it is over, the remaining HTML lines are executed.

DOM (Document Object Model):
- Things you have in the DOM are not accessible in node.js or deno or other runtimes

Assume your HTML is as follows:
	<div class="red-square"></div>

Assume CSS is as follows:
	.red-square {
		color: red;
		width: 100px;
		height: 100px;
	}

Our output would be a red square, we can overwrite this using Javascript.

const redSquare = document.querySelector(".red-square");
redSquare.style.backgroundColor = "limegreen";
redSquare.style.width = "300px";

The variable redSquare would be referring to the square created in HTML, and we can modify its appearance using JS.

The "document" keyword allows you to reach into your HTML and modify values.
When we manipulate styles, we're actually just adding inline styles.

document.querySelector(".className") = directly gives you an object of the first instance of the class name.
document.getElementsByClassName("className") = gives you a Node List (use it like an array), which contains all elements of that class name.
A node list is similar to an array, but it does not have certain functions like .map(), .filter() and so on.

The old way of modifying values was document.getElementsByClassName('classNameWithout.')

Note: querySelector finds the first instance of some class
	  querySelectorAll finds all the instances of some class, and returns a Node list.

const elementsToChange = document.querySelectorAll(".js-target");
elementsToChange.forEach((element) => {
  element.innerText = "Changed";
  element.style.color = "blue";
})

Note: When using .querySelectorAll(), we have to be precise with our className. Simply passing a tag like <li></li> will select everything 
on your page. 

let counter = 0;

const buttonHandler = document.querySelector(".myButton");
buttonHandler.addEventListener("click", () => {
	counter += 1;
	console.log("Hello from console", counter);
});

The addEventListener function takes the action you want it to listen to, and the function to execute when the event happens.
The action we pass is the event, the function we pass as a parameter is called a callback function.

Event Bubbling/ Event Delegation:
- Events can bubble up from children to their parents.

Example:
	<div class="button-container">
		<button>1</button>
		<button>2</button>
		<button>3</button>
		<button>4</button>
		<button>5</button>
	</div>

Instead of having to write event listeners for every button, we can just do:
- document.querySelector(".button-container").addEventListener("click", (event) => {
	console.log(`You clicked button number ${event.target.innerText}`);
})

event.target = lets you know what was clicked.
